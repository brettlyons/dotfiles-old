var express = require('express'),
    app = express(),
    bodyParser = require('body-parser'),
    db = require('./models'),
    methodOverride = require('method-override'),
    favicon = require('serve-favicon'),
    request = require('request'),
    morgan = require('morgan');

app.set('view engine', 'ejs');
app.use(methodOverride('_method'));
app.use(morgan('tiny'));
app.use(express.static(__dirname + '/public'));
app.use(bodyParser.urlencoded({extended:true}));
app.use(favicon(__dirname + '/public/favicon.ico'));

app.get('/', function(req,res){
  res.render('layout');
});

app.get('/places', function(req,res){
  db.Place.find({}, function(err,places){
    res.format({
      'text/html': function() {
        res.render("places/index", {places: places});
      },
      'application/json': function() {
        res.send({places: places});
      },
      'default': function() {
        res.status(406).send('Not Acceptable');
      }
    });
  });
});

app.post('/places', function(req,res){
  var placeDb = new db.Place(req.body.place);

  var savePlaceAndRespond = function(res, place) {

    place.save(function(err,place) {
      if (err) {
        // Send an error if the data could not be saved
        // Most likely a validation error
        res.status(422).send("Error: Invalid Input");
      } else {
        res.format({
          'text/html': function() {
            res.redirect("/places");
          },
          'application/json': function() {
            res.send(place);
          },
          'default': function() {
            res.status(406).send('Not Acceptable');
          }
        });
      }
    });
  };

  if (!placeDb.lat || placeDb.lat === '' || !placeDb.long || placeDb.long === '') {
    if (!placeDb.address || placeDb.address === '') {
      res.status(422).send('Invalid input');
    } else {
      var address = encodeURIComponent(placeDb.address);
      var apiUrl = 'http://maps.googleapis.com/maps/api/geocode/json?address=' + address;
      request(apiUrl, function(error, response, body) {
        if (error) {
          res.status(500).send('Server Error');
        } else if (!error && response.statusCode === 200) {
          var data = JSON.parse(body);
          if (data.results && data.results.length >= 1 &&
              data.results[0].geometry && data.results[0].geometry.location) {
            placeDb.lat = data.results[0].geometry.location.lat;
            placeDb.long = data.results[0].geometry.location.lng;

            savePlaceAndRespond(res, placeDb);
          } else {
            res.status(422).send('Place not found');
          }
        } else {
          res.status(500).send('Server Error');
        }
      });
    }
  } else {
    savePlaceAndRespond(res, placeDb);
  }
});

app.get('/places/new', function(req,res){
  res.render("places/new");
});

app.get('/places/:id/', function(req,res){
  db.Place.findById(req.params.id, function(err,place){
    res.render("places/show", {place:place});
  });
});

app.get('/places/:id/edit', function(req,res){
  db.Place.findById(req.params.id, function(err,place){
    res.render("places/edit", {place:place});
  });
});

app.put('/places/:id', function(req,res){
  db.Place.findByIdAndUpdate(req.params.id, req.body.place, function(err,place){
    res.redirect('/places');
  });
});

app.delete('/places/:id', function(req,res){
  db.Place.findByIdAndRemove(req.params.id, function(err,place){
    res.redirect('/places');
  });
});

app.get('*', function(req,res){
  res.render('errors/404');
});

app.listen(3000, function(){
  console.log("Server is listening on port 3000");
});

