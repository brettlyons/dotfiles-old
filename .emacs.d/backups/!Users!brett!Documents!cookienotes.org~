* cookies
** set-cookie
    * response
      * res.cookie()
** cookie 
    * request
      * req.cookies
** res.clearCookie()
    * for logging out
* 3 parts to an HTTP request
** Request line
    * verb (aka method)
    * path (url after slash) 
** header(s) 
    * cookie header incl.
** body
* 3 parts to a HTTP response
  * response line
  * headers
  * body
* cookie parser
** read cookie
    * turns the cookie into key-value pairs in an object
** write cookie
    * cookie object => string for sending to server
    * puts string into set-cookie
    
* 3 attack vectors
** Firesheep (packet sniffing and session theft)  -- antitode: https {secure: true} in setCookie()
** xss (Cross site scripting) -- antitode: no js { httpOnly: true }
** brute force -- antitode: signed cookies also req.signed.cookies
  
* sessions
** Session example
    1. req.cookie('message', 'hello!')  --> example
    2. cookie-session sits on top of cookie-parser
    3. var session = require('cookie-session');
    4. under cookieParser, you can give cookieSession some options . . .
       1. app.use(cookieSession({keys:[123, 443424, 5231432]}))
    5. now req.cookie from (1.) becomes req.session.message = 'hello';
    6. req.session is also pretty future-proof  -- and any web framework ever uses this
** Keys in cookieSession
    - First key in keys is used for signing, but the rest of the keys are for validating the key used
      - so rotate all of them . . . Maybe once a week, maybe generate new keys and rotate . . .
      - node -e "require('crypto').randomBytes(48, function(ex, buf) { console.log(buf.toString('hex')) });"
        - generates a long random line for cryptographic purposes
* encryption with bcrypt
  * never store in cleartext
  * always salt the hash
  * always use a *slow* (hard to reverse) hashing algo aka bcrypt with difficulty set to 10
  * bcrypt does this all for us
  * bcrypt.compare('passwd', bcryptedPassHash);  -- so compare is necessary to replace ==
** To sum up:
  1. Register 
     1. Hash/Store
  2. Login 
     1. compare hash
     2. set session
  3. Logout
     1. clear cookie
  4. Middleware
     1. currentUser
