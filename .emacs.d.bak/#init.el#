;;; package --- Summary
;;; Commentary:
;; My init.el.  Currently configured to automatically check for packages, and configure relevant pieces of those packages.

;;; Code:
;; Basics, universals.
;; Spaces, not tabs
(setq-default indent-tabs-mode nil)
;; Tab width is now 2
(setq-default tab-width 2)
;; same for js mode -- js2 mode set up below though.
;; (setq js-indent-level 2)
;; Indent Level
(setq-default indent-level 2)
(setq-default evil-shift-width 2)

(setq-default c-basic-offset 2
              tab-width 2
              indent-tabs-mode nil)

;; package archives first
(require 'package)
(push '("marmalade" . "http://marmalade-repo.org/packages/")
      package-archives )
(push '("melpa" . "http://melpa.org/packages/")
      package-archives)
(package-initialize)

;; set up use-package to simplify this config
(if (not (package-installed-p 'use-package))
    (progn
      (package-refresh-contents)
      (package-install 'use-package)))
(require 'use-package)

(setq use-package-always-ensure t)
(setq use-package-verbose t)

(use-package evil-tabs)

;; (use-package evil-leader)

(use-package evil-org
  :defer 1
  :init
  (setq evil-want-C-i-jump nil))

(use-package powerline
  :config
  (powerline-default-theme))

;; (use-package evil-terminal-cursor-changer
;;   :if (not display-graphic-p))
;; tabs
;; (unless (display-graphic-p)
;;   (require 'evil-terminal-cursor-changer))

(use-package evil-surround
  :defer t
  :config
  (global-evil-surround-mode 1))

(use-package evil
  :init
  (setq evil-normal-state-cursor '("green" box))
  (setq evil-insert-state-cursor '("green" bar))
  (global-evil-tabs-mode t)
  :config
  (evil-mode 1)
  (global-evil-surround-mode 1)
  :bind (:map evil-normal-state-map
              ("SPC" . ace-jump-mode)))

; Ace jump activation, via spacebar in normal mode
;; (define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)
;; (use-package ace-jump-mode
;;   :commands ace-jump-mode
;;   :init
;;   (define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode))

(use-package ace-jump-mode
  :defer t)

(use-package yasnippet
  :defer 1
  :init
  (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
  :config
  (yas-global-mode 1))

  ;; :bind (:map yas-minor-mode-map
  ;;             ("<C-tab>" .'yas-expand))
;; (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
;; ==
;; (define-key yas-minor-mode-map (kbd "<tab>") nil)
;; (define-key yas-minor-mode-map (kbd "TAB") nil)

(use-package auto-complete
  :defer 1
  ;; :init
  ;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
  :config
  (ac-config-default)
  (ac-set-trigger-key "TAB")
  (ac-set-trigger-key "<tab>"))

;; setting up autocomplete
;; (require 'auto-complete-config)
;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
;; (ac-config-default)
;; (ac-set-trigger-key "TAB")
;; (ac-set-trigger-key "<tab>")

;; ;; http://www.flycheck.org/manual/latest/index.html
(use-package flycheck
  :defer 2
  :config
  (global-flycheck-mode))
;; ;; turn on flychecking globally
;; (add-hook 'after-init-hook #'global-flycheck-mode)


(use-package rainbow-delimiters
  :defer 1
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

(use-package material-theme)

(use-package cider
  :mode ("\\.clj$" . clojure-mode))

(use-package sbt-mode
  :mode ("\\.scala\\'" . scala-mode))

(use-package scala-mode
  :mode "\\.scala\\'")

(use-package ensime
  :mode ("\\.scala\\'" . scala-mode)
  :init
  (add-hook 'scala-mode-hook 'ensime-mode)
  :commands ensime ensime-mode)

;; pairing of parens (built-in)
(electric-pair-mode 1)
(show-paren-mode 1)
;; (display-time-mode t)

;; adds line numbers to sourcecode files
(add-hook 'prog-mode-hook
  (function (lambda ()
    (linum-mode 1))))

; turn off cursor blink
(setq visible-cursor nil)

;; mouse in terminal
(require 'mouse)
(xterm-mouse-mode 1)

;; copy & paste in linux
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

;; different site-lisp dirs for different OS's -- enabling shared home
(cond
  ((string-equal system-type "gnu/linux")
    (let ((default-directory "/usr/share/emacs/site-lisp/"))
      (normal-top-level-add-subdirs-to-load-path)))
  ((string-equal system-type "darwin")
    (let ((default-directory "/usr/local/share/emacs/site-lisp/"))
      (normal-top-level-add-subdirs-to-load-path))))

;; autosave to file instead of #filename#
;; (defun save-buffer-if-visiting-file (&optional args)
;;   "Save the current buffer only if it is visiting a file"
;;   (interactive)
;;   (if (and (buffer-file-name) (buffer-modified-p))
;;       (save-buffer args)))
;; (add-hook 'auto-save-hook 'save-buffer-if-visiting-file)

;; autosave entire file to the file(no #filename# files or w/e)
(defun full-auto-save ()
  "Automatically save the file directly."
  (interactive)
  (save-excursion
    (dolist (buf (buffer-list))
      (set-buffer buf)
      (if (and (buffer-file-name) (buffer-modified-p))
          (basic-save-buffer)))))
(add-hook 'auto-save-hook 'full-auto-save)

;(require 'pbcopy)
;(turn-on-pbcopy)

;; start fullscreen (for OS X / floating WMs)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; another way to do that ^
;;(toggle-frame-maximized)
;; (custom-set-variables
;;  '(initial-frame-alist (quote ((fullscreen . maximized)))))

;; golden ratio mode for split window editing
;(require 'golden-ratio)
;(golden-ratio-mode 1)
;(golden-ratio-auto-scale t)

;;semantic markup mode
;(semantic-mode 1)
;(setq semantic-complete-inline-analyzer-displayor-class 'semantic-displayor-ghost)

;; https://github.com/purcell/exec-path-from-shell
;; only need exec-path-from-shell on OSX
;; this hopefully sets up path and other vars better

;; MAC OS X FIX FOR LACKING ENV VARs
;; (when (memq window-system '(mac ns))
;;   (exec-path-from-shell-initialize))

;; ELM MODE
;; elm-mode auto-complete setup
;; (defun my-elm-hook ()
;;   "Turn on auto-complete for elm as well as set up the oracle."
;;   #'elm-oracle-setup-ac
;;   (auto-complete-mode t))
;; (add-hook 'elm-mode-hook #'elm-oracle-setup-ac)

;; (add-hook 'elm-mode-hook 'my-elm-hook)

;; set yasnippets to be higher priority in aau
;; (defadvice ac-common-setup (after give-yasnippet-highest-priority activate)
;;   (setq ac-sources (delq 'ac-source-yasnippet ac-sources))
;;     (add-to-list 'ac-sources 'ac-source-yasnippet))

;; (defun ac-js-mode()
;;   (setq ac-sources '(ac-source-yasnippet
;;                      ac-source-symbols
;;                      ac-source-words-in-buffer
;;                      ac-source-words-in-same-mode-buffers
;;                      ac-source-files-in-current-dir
;;                      )))
;; (add-hook 'js-mode-hook 'ac-js-mode)
;; (add-hook 'js2-mode-hook 'ac-js-mode)

;; JavaScript mode-hooks w/ autocomplete
;;(add-hook 'js-mode-hook 'js2-minor-mode)
(use-package js2-mode
  :init
  (setq js2-highlight-level 3)
  :config
  (add-hook 'js2-mode-hook 'ac-js2-mode)
  :mode "\\.js\\'")

;; http://web-mode.org/
;; use web-mode for .jsx files
(use-package web-mode
  :init
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-ac-sources-alist
    '(("css" . (ac-source-css-property))
      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
  :config
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  :mode
  ("\\.html?\\'" . web-mode)
  ("\\.jsx$" . web-mode))
  

;; disable jshint to prefer eslint checking
;; (setq-default flycheck-disabled-checkers
;;   (append flycheck-disabled-checkers
;;     '(javascript-jshint)))

;; use eslint with web-mode for jsx files

;; disable json-jsonlist checking for json files
;; (setq-default flycheck-disabled-checkers
;;   (append flycheck-disabled-checkers
;;     '(json-jsonlist)
;; ;    '(javascript-jscs) ; uncomment to disable javascript-jscs
;;     ))


;; end of web-mode stuff for indent setting etc.

; org mode settings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)


(provide 'init)
;;; init.el ends here
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (material)))
 '(custom-safe-themes
   (quote
    ("e56ee322c8907feab796a1fb808ceadaab5caba5494a50ee83a13091d5b1a10c" default)))
 '(inhibit-startup-screen t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#263238" :foreground "#ffffff" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 143 :width normal :foundry "ADBO" :family "Source Code Pro")))))
